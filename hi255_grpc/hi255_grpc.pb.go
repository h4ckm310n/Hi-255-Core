// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: hi255_grpc/hi255.proto

package hi255_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Service_FetchRemoteDevices_FullMethodName = "/hi255_grpc.Service/FetchRemoteDevices"
	Service_FetchMessages_FullMethodName      = "/hi255_grpc.Service/FetchMessages"
	Service_UpdateConfig_FullMethodName       = "/hi255_grpc.Service/UpdateConfig"
	Service_SendGreeting_FullMethodName       = "/hi255_grpc.Service/SendGreeting"
	Service_SendFile_FullMethodName           = "/hi255_grpc.Service/SendFile"
	Service_SendText_FullMethodName           = "/hi255_grpc.Service/SendText"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	FetchRemoteDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Service_FetchRemoteDevicesClient, error)
	FetchMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Service_FetchMessagesClient, error)
	UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*Empty, error)
	SendGreeting(ctx context.Context, in *SendGreetingRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	SendFile(ctx context.Context, in *SendFileRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	SendText(ctx context.Context, in *SendTextRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) FetchRemoteDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Service_FetchRemoteDevicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[0], Service_FetchRemoteDevices_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceFetchRemoteDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_FetchRemoteDevicesClient interface {
	Recv() (*RemoteDevicesResponse, error)
	grpc.ClientStream
}

type serviceFetchRemoteDevicesClient struct {
	grpc.ClientStream
}

func (x *serviceFetchRemoteDevicesClient) Recv() (*RemoteDevicesResponse, error) {
	m := new(RemoteDevicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) FetchMessages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Service_FetchMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Service_ServiceDesc.Streams[1], Service_FetchMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceFetchMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Service_FetchMessagesClient interface {
	Recv() (*MessagesResponse, error)
	grpc.ClientStream
}

type serviceFetchMessagesClient struct {
	grpc.ClientStream
}

func (x *serviceFetchMessagesClient) Recv() (*MessagesResponse, error) {
	m := new(MessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceClient) UpdateConfig(ctx context.Context, in *UpdateConfigRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Service_UpdateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SendGreeting(ctx context.Context, in *SendGreetingRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Service_SendGreeting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SendFile(ctx context.Context, in *SendFileRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Service_SendFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SendText(ctx context.Context, in *SendTextRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, Service_SendText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	FetchRemoteDevices(*Empty, Service_FetchRemoteDevicesServer) error
	FetchMessages(*Empty, Service_FetchMessagesServer) error
	UpdateConfig(context.Context, *UpdateConfigRequest) (*Empty, error)
	SendGreeting(context.Context, *SendGreetingRequest) (*CommonResponse, error)
	SendFile(context.Context, *SendFileRequest) (*CommonResponse, error)
	SendText(context.Context, *SendTextRequest) (*CommonResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) FetchRemoteDevices(*Empty, Service_FetchRemoteDevicesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchRemoteDevices not implemented")
}
func (UnimplementedServiceServer) FetchMessages(*Empty, Service_FetchMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchMessages not implemented")
}
func (UnimplementedServiceServer) UpdateConfig(context.Context, *UpdateConfigRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedServiceServer) SendGreeting(context.Context, *SendGreetingRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGreeting not implemented")
}
func (UnimplementedServiceServer) SendFile(context.Context, *SendFileRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedServiceServer) SendText(context.Context, *SendTextRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendText not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_FetchRemoteDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).FetchRemoteDevices(m, &serviceFetchRemoteDevicesServer{stream})
}

type Service_FetchRemoteDevicesServer interface {
	Send(*RemoteDevicesResponse) error
	grpc.ServerStream
}

type serviceFetchRemoteDevicesServer struct {
	grpc.ServerStream
}

func (x *serviceFetchRemoteDevicesServer) Send(m *RemoteDevicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_FetchMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServer).FetchMessages(m, &serviceFetchMessagesServer{stream})
}

type Service_FetchMessagesServer interface {
	Send(*MessagesResponse) error
	grpc.ServerStream
}

type serviceFetchMessagesServer struct {
	grpc.ServerStream
}

func (x *serviceFetchMessagesServer) Send(m *MessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Service_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateConfig(ctx, req.(*UpdateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SendGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGreetingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SendGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SendGreeting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SendGreeting(ctx, req.(*SendGreetingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SendFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SendFile(ctx, req.(*SendFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_SendText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SendText(ctx, req.(*SendTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hi255_grpc.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateConfig",
			Handler:    _Service_UpdateConfig_Handler,
		},
		{
			MethodName: "SendGreeting",
			Handler:    _Service_SendGreeting_Handler,
		},
		{
			MethodName: "SendFile",
			Handler:    _Service_SendFile_Handler,
		},
		{
			MethodName: "SendText",
			Handler:    _Service_SendText_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchRemoteDevices",
			Handler:       _Service_FetchRemoteDevices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchMessages",
			Handler:       _Service_FetchMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hi255_grpc/hi255.proto",
}
